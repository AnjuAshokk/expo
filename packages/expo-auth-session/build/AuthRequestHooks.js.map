{"version":3,"file":"AuthRequestHooks.js","sourceRoot":"","sources":["../src/AuthRequestHooks.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nimport { AuthRequest } from './AuthRequest';\nimport { AuthRequestConfig, AuthRequestPromptOptions, ResponseType } from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { DiscoveryDocument, IssuerOrDiscovery, resolveDiscoveryAsync } from './Discovery';\nimport { TokenResponse } from './TokenRequest';\n\n/**\n * Fetch the discovery document from an OpenID Connect issuer.\n *\n * @param issuerOrDiscovery\n */\nexport function useAutoDiscovery(issuerOrDiscovery: IssuerOrDiscovery): DiscoveryDocument | null {\n  const [discovery, setDiscovery] = useState<DiscoveryDocument | null>(null);\n\n  useEffect(() => {\n    resolveDiscoveryAsync(issuerOrDiscovery).then(discovery => {\n      setDiscovery(discovery);\n    });\n  }, [issuerOrDiscovery]);\n\n  return discovery;\n}\n\n/**\n * Load an authorization request.\n * Returns a loaded request, a response, and a prompt method.\n * When the prompt method completes then the response will be fulfilled.\n *\n * @param config\n * @param discovery\n */\nexport function useAuthRequest(\n  config: AuthRequestConfig,\n  discovery: DiscoveryDocument | null\n): [\n  AuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>\n] {\n  const [request, setRequest] = useState<AuthRequest | null>(null);\n  const [result, setResult] = useState<AuthSessionResult | null>(null);\n\n  const promptAsync = useCallback(\n    async (options: AuthRequestPromptOptions = {}) => {\n      if (!discovery || !request) {\n        throw new Error('Cannot prompt to authenticate until the request has finished loading.');\n      }\n      const result = await request?.promptAsync(discovery, options);\n      setResult(result);\n      return result;\n    },\n    [request?.url, discovery?.authorizationEndpoint]\n  );\n\n  useEffect(() => {\n    if (config && discovery) {\n      const request = new AuthRequest(config);\n      request.makeAuthUrlAsync(discovery).then(() => setRequest(request));\n    }\n  }, [\n    discovery?.authorizationEndpoint,\n    config.clientId,\n    config.redirectUri,\n    config.prompt,\n    config.scopes.join(','),\n    config.clientSecret,\n    config.codeChallenge,\n    config.state,\n    JSON.stringify(config.extraParams || {}),\n    config.usePKCE,\n  ]);\n\n  return [request, result, promptAsync];\n}\n\n/**\n * Load an implicit authorization request.\n * Returns a loaded request, a response, and a prompt method.\n * When the prompt method completes then the response will be fulfilled.\n *\n * @param config\n * @param discovery\n */\nexport function useImplicitAuthRequest(\n  config: Omit<AuthRequestConfig, 'responseType'>,\n  discovery: DiscoveryDocument | null\n): [\n  AuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>,\n  TokenResponse | null\n] {\n  const [request, result, promptAsync] = useAuthRequest(\n    { ...config, responseType: ResponseType.Token },\n    discovery\n  );\n  const [response, setResponse] = useState<TokenResponse | null>(null);\n\n  useEffect(() => {\n    if (result?.type === 'success') {\n      if (result.params.access_token) {\n        const {\n          access_token,\n          token_type,\n          expires_in,\n          refresh_token,\n          scope,\n          state,\n          id_token,\n          issued_at,\n        } = result.params;\n        setResponse(\n          new TokenResponse({\n            accessToken: access_token,\n            refreshToken: refresh_token,\n            scope,\n            state,\n            idToken: id_token,\n            // @ts-ignore: expected TokenType\n            tokenType: token_type,\n            // @ts-ignore: expected number\n            expiresIn: expires_in,\n            // @ts-ignore: expected number\n            issuedAt: issued_at,\n          })\n        );\n      }\n    }\n  }, [result, result?.type === 'success' && result.params.access_token]);\n\n  return [request, result, promptAsync, response];\n}\n"]}